【Java】锁升级过程
偏向锁：线程访问同步块时，如果同步块没有被锁定，JVM会将该线程ID记录在对象头中，
并把对象头标记为偏向锁。当线程再次访问同步块时，
JVM会比较对象头中的线程ID与当前线程ID是否一致，
如果一致，则表示该线程没有竞争，可以直接获得锁。如果不一致，
则表示该对象存在竞争，需要撤销偏向锁。
轻量级锁：当多个线程竞争同一个偏向锁时，
会将偏向锁升级为轻量级锁。
此时，JVM会在线程的栈帧中创建Lock Record（锁记录）
，用于保存对象的Mark Word（对象头）的拷贝，
将对象头的Mark Word替换为指向Lock Record的指针。
竞争的线程会尝试用CAS操作将对象头的Mark Word替换为指向自己Lock Record的指针，
如果CAS操作成功，则获得锁，如果CAS操作失败，
则会进入自旋等待，直到获得锁或者超过重试次数。
重量级锁：当自旋超过指定次数或者持有锁的线程被阻塞时，轻量级锁会升级为重量级锁。
重量级锁是基于操作系统的Mutex Lock实现的，
当线程请求锁时，操作系统会将其挂起，直到获得锁为止。
此时，其他线程会在操作系统级别上等待被唤醒。
轻量级锁的自旋次数可以通过JVM参数“-XX:PreBlockSpin”来指定。
如果自旋次数超过了该参数值，则会升级为重量级锁
微信公众号关注科技青莲获取面试资料
