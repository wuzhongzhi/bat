【Spring面试题】：8.Spring的AOP的底层实现原理
pring的AOP的底层实现原理主要是基于JDK动态代理和CGLIB字节码增强两种方式实现的。

当Bean实现了接口时，Spring默认使用JDK动态代理实现AOP。
它利用了Java的反射机制，在运行时创建一个实现目标接口的代理类对象，
通过代理类对象调用方法来实现AOP。

当Bean没有实现接口时，Spring则使用CGLIB字节码增强实现AOP。
它通过动态生成一个目标对象的子类，并在子类中重写了需要增强的方法，
从而实现对目标对象方法的增强。

不管使用哪种方式，Spring的AOP都是通过在目标Bean的方法前后动态织入Advice来实现的。
Advice是一个通用的概念，它指的是在目标对象的方法执行前、执行后或抛出异常时执行的代码。
Spring中常用的Advice类型包括BeforeAdvice、
AfterReturningAdvice、ThrowsAdvice和AroundAdvice等。

AOP的核心就是在目标方法的前后或者抛出异常时，
将切面所定义的Advice动态织入到目标方法中，以实现额外的功能。
Spring通过利用动态代理和字节码增强技术，
在运行时动态地创建代理对象并将Advice织入目标对象的方法中，从而实现AOP。
微信公众号关注科技青莲获取面试资料
